{"version":3,"sources":["colorSchemes.js","reconstruction.js","MSATree.js","MSAAlignNames.js","MSAAlignCanvas.js","MSAAlignRows.js","MSAStruct.js","MSAStructPanel.js","MSA.js","App.js","serviceWorker.js","index.js","webpack:///./src/reconstruction.js?60c3"],"names":["clustal","G","P","S","T","H","K","R","F","W","Y","I","L","M","V","lesk","A","C","N","Q","D","E","maeditor","cinema","B","Z","X","getAncestralReconstruction","data","a","branches","rowData","id","gapChar","ancestralRowData","maxEntropy","Math","log","model","PhylogeneticLikelihood","models","makeGappedModel","defaultModel","deletionRate","getNodePostProfiles","branchList","nodeSeq","postProbThreshold","defaultGapChar","nodeProfile","Object","keys","forEach","node","map","charProb","chars","filter","c","sort","b","norm","reduce","psum","probs","entropy","s","p","n","MSATree","props","canvasRef","React","createRef","treeWidth","this","computedTreeConfig","treeHeight","treeLayout","className","style","minWidth","ref","width","height","top","scrollTop","renderTree","current","addEventListener","handleClick","bind","removeEventListener","treeIndex","computedView","collapsed","ancestorCollapsed","forceDisplayNode","nodeScale","branchStrokeStyle","treeStrokeWidth","rowConnectorDash","nodeHandleRadius","nodeHandleFillStyle","collapsedNodeHandleFillStyle","nx","ny","treeCanvas","ctx","getContext","setTransform","globalAlpha","clearRect","strokeStyle","fillStyle","lineWidth","setAlpha","scale","nodesWithHandles","nodes","children","length","setLineDash","beginPath","fillRect","child","moveTo","lineTo","stroke","arc","PI","makeNodeHandlePath","fill","evt","preventDefault","closestNode","closestNodeDistSquared","mouseX","parseInt","offsetX","mouseY","offsetY","distSquared","pow","config","nodeHandleClickRadius","handleNodeClick","Component","MSAAlignNames","computedFontConfig","structure","nameDivWidth","nameFontName","nameFontSize","nodeHeight","fontFamily","fontSize","maxWidth","nodeVisible","row","view","transform","opacity","key","onClick","handleNameClick","MSAAlignCanvas","state","clientWidth","clientHeight","getDimensions","left","color","toUpperCase","scrollLeft","offscreenRatio","getOffscreenRatio","offscreenWidth","offscreenHeight","max","bottom","min","right","alignLayout","alignWidth","setState","renderVisibleRegion","firstRow","lastRow","alignCanvas","alignIndex","font","charFont","rowHeight","rowY","col","xScale","computedColScale","colX","colWidth","yScale","computedRowScale","seq","getColor","fillText","cp","ci","columns","MSAAlignRows","rowsDivRef","alignCanvasRef","onScroll","handleScroll","hoverColumn","onMouseMove","handleMouseMove","onMouseLeave","handleMouseLeave","onMouseDown","handleMouseDown","setScrollPos","setClientSize","window","opts","handleAlignCharClick","resolveAlignCoords","coords","lastCoords","column","handleAlignCharMouseOut","handleAlignCharMouseOver","x","nativeEvent","y","colToSeqPos","alignColToSeqPos","seqPos","isGap","isGapChar","MSAStruct","pvDivRef","wantStructure","isArray","structureInfo","structureID","pdb","Select","value","displayEmpty","onChange","handleSelectStructure","MenuItem","disabled","info","handleClose","structureConfig","pvConfig","antialias","quality","updatePv","loadStructure","updateStructure","target","pdbFetchInitiated","getPvConfig","viewer","pv","Viewer","loadFromPDB","noRemoteStructures","pdbFilePath","pdbUrlPrefix","pdbPrefix","pdbUrlSuffix","pdbSuffix","io","fetchPdb","setViewType","centerOn","autoZoom","rect","boundingClientRect","picked","pick","clientX","clientY","residue","num","chain","name","handleMouseoverResidue","handleCloseStructure","MSAStructPanel","initConfig","viewMode","colorScheme","structures","handleSelectViewType","handleSelectColorScheme","FormControlLabel","control","Checkbox","checked","showMouseoverLabel","handleMouseoverLabelConfig","label","pdbSeqPos","event","clear","geometry","renderAs","trueAtomColor","requestRedrawStructures","undefined","labelConfig","fontColor","backgroundAlpha","atomHighlightColor","seqCoords","startPos","removeMouseoverLabels","chains","chainInfo","endPos","pdbChain","residues","residueSelect","res","eachResidue","mouseoverLabel","qualifiedName","centralAtom","pos","atoms","atom","index","atomColor","getColorForAtom","setColorForAtoms","push","labelInfo","rm","byColor","trueColor","colorString","toString","go","createEmptyView","addAtom","colorBy","uniform","setTimer","redrawStructureDelay","requestRedraw","MSA","extend","initialView","alignScrollLeft","rowsRef","msaRef","structRef","columnScale","disableTreeEvents","animating","openStructures","rowDataAsArray","setCollapsedState","parent","kids","root","columnVisible","Array","genericRowHeight","availableTreeWidth","rh","distFromRoot","maxDistFromRoot","alignChars","charWidth","charMetrics","measureContext","create","measureText","ceil","charHeight","nextColX","type","styles","attrs","element","document","createElement","appendChild","attr","setAttribute","getComputedView","layoutTree","layoutAlignment","containerWidth","containerHeight","treeAlignHeight","setAlignmentClientSize","handleAlignmentScroll","handleAlignmentMouseDown","delayedSetHoverColumn","handleMouseoverStructureResidue","handleMouseUp","handleMouseWheel","passive","w","h","alignmentClientWidth","alignmentClientHeight","nStructs","newStructure","scrolling","collapseAnimationFrames","framesLeft","wasCollapsed","finalCollapsed","finalForceDisplayNode","finalComputedView","newlyVisibleColumns","newlyHiddenColumns","persistingVisibleColumns","centroidMinusScroll","centroidOfColumns","lastFrameTime","Date","now","expectedTimeBetweenFrames","collapseAnimationDuration","drawAnimationFrame","newCollapsed","descendants","desc","boundAlignScrollLeft","requestAnimationFrame","currentTime","timeSinceLastFrame","timeToNextFrame","frameSkip","collapseAnimationMaxFrameSkip","setTimeout","deltaY","deltaMode","incAlignScrollLeft","deltaX","incScrollTop","mouseDown","lastY","pageY","alignMouseDown","lastX","pageX","panning","setMouseoverTimer","setHoverColumn","callback","mouseoverLabelDelay","removeLabelFromStructuresOnMouseout","addLabelToStructuresOnMouseover","seqPosToCol","seqPosToAlignCol","find","cols","sum","dx","dy","boundScrollTop","mousedown","updated","animationTimeout","cancelAnimationFrame","delay","timer","clearTimer","clearTimeout","App","defaultConfig","nodeHandleStrokeStyle","charFontName","colorSchemes","nameFontColor","datasets","divRef","inputRef","onpopstate","setDataset","location","reload","stopPropagation","dataTransfer","dropEffect","openFiles","files","nAlign","findIndex","ds","resetView","nDatasetsInitial","newState","queryString","parse","search","alignIdQueryParam","nAlignQueryParam","history","pushState","title","stringify","click","Promise","all","from","file","openFile","resolve","reject","reader","FileReader","onload","e","text","result","addDatasets","readAsText","autoselect","newAlignmentName","sniffStockholmRegex","test","stocks","Stockholm","parseAll","concat","stockholmjs","tag","gf","json","JSON","auto","firstDataset","extra","datasetID","datasetsLoaded","indexData","then","dataWithIndices","reconstructingAncestors","suppliedData","suppliedConfig","getData","cacheData","buildTreeIndex","buildAlignmentIndex","url","makeURL","fetch","ok","console","warn","statusText","stockholm","sniffFastaRegex","fasta","unpackStockholm","unpackStockholmJS","parseFasta","Error","newick","newickjs","NewickParser","Newick","newickTree","getName","obj","traverse","branchset","taxa","seqs","taxon","distMatrix","JukesCantor","calcFiniteDistanceMatrix","rnj","RapidNeighborJoining","run","tree","getAsObject","guessSeqCoords","len","countNonGapChars","coordMatch","nameEncodedCoordRegex","exec","replace","process","stockjs","stock","seqdata","NH","join","gs","DR","seqLen","dr","match","pdbRegex","toLowerCase","pdbLen","fullLengthMatch","noPartialStructures","pdbStruct","pdbIndex","handleDragOver","handleDragEnter","handleDrop","initDataset","reconstructMissingNodes","dataurl","getInitialDataset","params","promise","Worker","getAncestralReconstructionWorker","incorporateAncestralReconstruction","fn","blob","Blob","URL","createObjectURL","handler","defaultColorScheme","re","split","line","rootSpecified","roots","getRoots","indexOf","branchLength","branch","seenNode","addNode","addSubtree","clade","isNode","hasParent","isChar","error","pos2col","rowAsArray","handleSelectFile","display","handleSelectDataset","rel","href","Boolean","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message","addMethods","methods","module","exports"],"mappings":"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","file":"static/js/main.e9992606.chunk.js","sourcesContent":["export default {\n  clustal: {\n    G: 'orange',\n    P: 'orange',\n    S: 'orange',\n    T: 'orange',\n    H: 'red',\n    K: 'red',\n    R: 'red',\n    F: 'blue',\n    W: 'blue',\n    Y: 'blue',\n    I: 'green',\n    L: 'green',\n    M: 'green',\n    V: 'green',\n  },\n  lesk: {\n    G: 'orange',\n    A: 'orange',\n    S: 'orange',\n    T: 'orange',\n    C: 'green',\n    V: 'green',\n    I: 'green',\n    L: 'green',\n    P: 'green',\n    F: 'green',\n    Y: 'green',\n    M: 'green',\n    W: 'green',\n    N: 'magenta',\n    Q: 'magenta',\n    H: 'magenta',\n    D: 'red',\n    E: 'red',\n    K: 'blue',\n    R: 'blue',\n  },\n  maeditor: {\n    A: 'lightgreen',\n    G: 'lightgreen',\n    C: 'green',\n    D: 'darkgreen',\n    E: 'darkgreen',\n    N: 'darkgreen',\n    Q: 'darkgreen',\n    I: 'blue',\n    L: 'blue',\n    M: 'blue',\n    V: 'blue',\n    F: '#c8a2c8',  // lilac\n    W: '#c8a2c8',  // lilac\n    Y: '#c8a2c8',  // lilac\n    H: 'darkblue',\n    K: 'orange',\n    R: 'orange',\n    P: 'pink',\n    S: 'red',\n    T: 'red',\n  },\n  cinema: {\n    H: 'blue',\n    K: 'blue',\n    R: 'blue',\n    D: 'red',\n    E: 'red',\n    S: 'green',\n    T: 'green',\n    N: 'green',\n    Q: 'green',\n    A: 'white',\n    V: 'white',\n    L: 'white',\n    I: 'white',\n    M: 'white',\n    F: 'magenta',\n    W: 'magenta',\n    Y: 'magenta',\n    P: 'brown',\n    G: 'brown',\n    C: 'yellow',\n    B: 'gray',\n    Z: 'gray',\n    X: 'gray',\n    '-': 'gray',\n    '.': 'gray',\n  },\n}\n","import PhylogeneticLikelihood from 'phylogenetic-likelihood';\n\nexport const getAncestralReconstruction = async (data) => {\n  const { branches, rowData, id } = data\n  let { gapChar } = data\n  gapChar = gapChar || '-'\n  let ancestralRowData = {}\n  const alphSize = 20  // assume for ancestral reconstruction purposes these are protein sequences; if not we'll need to pass a different model into getNodePostProfiles\n  const maxEntropy = Math.log(alphSize) / Math.log(2)\n  const deletionRate = .001\n  const model = PhylogeneticLikelihood.models.makeGappedModel ({ model: PhylogeneticLikelihood.models[PhylogeneticLikelihood.defaultModel],\n                                                                 deletionRate,\n                                                                 gapChar })\n  const { nodeProfile }\n        = PhylogeneticLikelihood.getNodePostProfiles ({ branchList: branches,\n                                                        nodeSeq: rowData,\n                                                        postProbThreshold: .01,\n                                                        model,\n                                                        defaultGapChar: gapChar })\n  Object.keys(nodeProfile).forEach ((node) => {\n    ancestralRowData[node] = nodeProfile[node].map ((charProb) => {\n      if (charProb[gapChar] >= .5)\n        return gapChar\n      const chars = Object.keys(charProb).filter ((c) => c !== gapChar).sort ((a, b) => charProb[a] - charProb[b])\n      const norm = chars.reduce ((psum, c) => psum + charProb[c], 0)\n      const probs = chars.map ((c) => charProb[c] / norm)\n      const entropy = probs.reduce ((s, p) => s - p * Math.log(p), 0) / Math.log(2)\n      return chars.map ((c, n) => [c, probs[n] * (maxEntropy - entropy) / maxEntropy])\n    })\n  })\n  return { id, ancestralRowData }\n}\n","import React, { Component } from 'react';\n\nclass MSATree extends Component {\n  \n  constructor(props) {\n    super(props);\n    this.canvasRef = React.createRef()\n  }\n\n  render() {\n    const { treeWidth } = this.props.computedTreeConfig\n    const { treeHeight } = this.props.treeLayout\n    return (<div className=\"MSA-tree\"\n            style={{ minWidth: treeWidth }}>\n            <canvas className=\"MSA-tree-canvas\"\n            ref={this.canvasRef}\n            width={treeWidth}\n            height={treeHeight}\n            style={{ top: -this.props.scrollTop }}\n            />\n            </div>)\n  }\n\n  componentDidMount() {\n    this.renderTree()\n    this.canvasRef.current.addEventListener ('click', this.handleClick.bind(this))\n  }\n\n  componentWillUnmount() {\n    this.canvasRef.current.removeEventListener ('click', this.handleClick.bind(this))\n  }\n\n  componentDidUpdate() {\n    this.renderTree()\n  }\n\n  renderTree() {\n    const { treeIndex, treeLayout, computedView, computedTreeConfig } = this.props\n    const { collapsed, ancestorCollapsed, forceDisplayNode, nodeScale } = computedView\n    const { treeWidth, branchStrokeStyle, treeStrokeWidth, rowConnectorDash, nodeHandleRadius, nodeHandleFillStyle, collapsedNodeHandleFillStyle } = computedTreeConfig\n    const { nx, ny } = treeLayout\n    const treeCanvas = this.canvasRef.current\n    const ctx = treeCanvas.getContext('2d')\n    ctx.setTransform (1, 0, 0, 1, 0, 0)\n    ctx.globalAlpha = 1\n    ctx.clearRect (0, 0, treeCanvas.width, treeCanvas.height)\n    ctx.strokeStyle = branchStrokeStyle\n    ctx.fillStyle = branchStrokeStyle\n    ctx.lineWidth = treeStrokeWidth\n    const makeNodeHandlePath = (node) => {\n      ctx.beginPath()\n      ctx.arc (nx[node], ny[node], nodeHandleRadius, 0, 2*Math.PI)\n    }\n    const setAlpha = (node) => {\n      const scale = nodeScale[node]\n      ctx.globalAlpha = (typeof(scale) === 'undefined' || forceDisplayNode[node]) ? 1 : scale\n    }\n    let nodesWithHandles = treeIndex.nodes.filter ((node) => !ancestorCollapsed[node] && treeIndex.children[node].length)\n    treeIndex.nodes.forEach ((node) => {\n      if (!ancestorCollapsed[node]) {\n        if (!treeIndex.children[node].length) {\n          setAlpha (node)\n          ctx.setLineDash ([])\n          ctx.beginPath()\n          ctx.fillRect (nx[node], ny[node] - nodeHandleRadius, 1, 2*nodeHandleRadius)\n        }\n        if (treeIndex.children[node].length && !collapsed[node]) {\n          ctx.setLineDash ([])\n          treeIndex.children[node].forEach ((child) => {\n            setAlpha (child)\n            ctx.beginPath()\n            ctx.moveTo (nx[node], ny[node])\n            ctx.lineTo (nx[node], ny[child])\n            ctx.lineTo (nx[child], ny[child])\n            ctx.stroke()\n          })\n        }\n        ctx.globalAlpha = 1\n        if (treeIndex.children[node].length === 0 || forceDisplayNode[node]) {\n          setAlpha (node)\n          ctx.setLineDash (rowConnectorDash)\n          ctx.beginPath()\n          ctx.moveTo (nx[node], ny[node])\n          ctx.lineTo (treeWidth, ny[node])\n          ctx.stroke()\n        }\n      }\n    })\n    ctx.strokeStyle = branchStrokeStyle\n    ctx.setLineDash ([])\n    nodesWithHandles.forEach ((node) => {\n      setAlpha (node)\n      makeNodeHandlePath (node)\n      // hack: collapsed[node]===false (vs undefined) means that we are animating the open->collapsed transition\n      // so the node's descendants are visible, but the node itself is rendered as collapsed\n      if (collapsed[node] || (forceDisplayNode[node] && collapsed[node] !== false))\n        ctx.fillStyle = collapsedNodeHandleFillStyle\n      else {\n        ctx.fillStyle = nodeHandleFillStyle\n        ctx.stroke()\n      }\n      ctx.fill()\n    })\n    this.nodesWithHandles = nodesWithHandles\n  }  \n\n  handleClick (evt) {\n    evt.preventDefault()\n    const { treeLayout } = this.props\n    const mouseX = parseInt (evt.offsetX)\n    const mouseY = parseInt (evt.offsetY)\n    let closestNode, closestNodeDistSquared\n    this.nodesWithHandles.forEach ((node) => {\n        const distSquared = Math.pow (mouseX - treeLayout.nx[node], 2) + Math.pow (mouseY - treeLayout.ny[node], 2)\n        if (typeof(closestNodeDistSquared) === 'undefined' || distSquared < closestNodeDistSquared) {\n          closestNodeDistSquared = distSquared\n          closestNode = node\n        }\n      })\n      if (closestNode && closestNodeDistSquared <= Math.pow(this.props.config.nodeHandleClickRadius,2))\n        this.props.handleNodeClick (closestNode)\n  }\n}\n\nexport default MSATree;\n","import React, { Component } from 'react';\n\nclass MSAAlignNames extends Component {\n\n  render() {\n    const { data, computedFontConfig, treeIndex, config, computedView, treeLayout } = this.props\n    const structure = data.structure || {}\n    const { nameDivWidth } = config\n    const { nameFontName, nameFontSize } = computedFontConfig\n\n    const { nodeHeight } = treeLayout\n    \n    return (<div className=\"MSA-alignment-names\"\n            style={{ fontFamily: nameFontName,\n                     fontSize: nameFontSize + 'px',\n                     maxWidth: nameDivWidth }}>\n            <div className=\"MSA-alignment-names-content\"\n            style={{ top: -this.props.scrollTop }}>\n            { treeIndex.nodes\n              .filter ((node) => computedView.nodeVisible[node])\n              .map ((node, row) => {\n                const style = { height: nodeHeight[node] + 'px' }\n                const scale = this.props.view.nodeScale[node]\n                if (typeof(scale) !== 'undefined' && scale !== 1) {\n                  style.transform = 'scale(1,' + scale +')'\n                  style.opacity = scale\n                }\n                return (<div className=\"MSA-alignment-name\"\n                        key={node}\n                        style={style}>\n                        { structure[node]\n                          ? (<span\n                             className=\"MSA-alignment-name-link\"\n                             onClick={()=>this.props.handleNameClick(node)}\n                             style={{ fontFamily: nameFontName,\n                                      fontSize: nameFontSize + 'px' }}\n                             >\n                             { node }\n                             </span>)\n                          : (<span> { node } </span>) }\n                        </div>)\n              }) }\n            </div>\n            </div>)\n  }\n\n}\n\nexport default MSAAlignNames;\n","import React, { Component } from 'react';\n\nclass MSAAlignCanvas extends Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = { clientWidth: 0,\n                   clientHeight: 0 }\n    this.canvasRef = React.createRef()\n  }\n\n  render() {\n    const { top, left, width, height } = this.getDimensions()\n    return (<canvas\n            ref={this.canvasRef}\n            className=\"MSA-alignment-canvas\"\n            width={width}\n            height={height}\n            style={{top,left}}\n            />)\n  }\n\n  getColor (c) {\n    const { color } = this.props.computedFontConfig\n    return color[c.toUpperCase()] || color['default'] || 'black';\n  }\n\n  // offscreenRatio = the proportion of the rendered view that is invisible, on each side. Total rendered area = visible area * (1 + 2 * offscreenRatio)^2\n  getOffscreenRatio() { return 1 }\n\n  getDimensions() {\n    const { scrollLeft, scrollTop } = this.props\n    const { clientWidth, clientHeight } = this.state\n    const offscreenRatio = this.getOffscreenRatio()\n    const offscreenWidth = offscreenRatio * clientWidth, offscreenHeight = offscreenRatio * clientHeight\n    const top = Math.max (0, scrollTop - offscreenHeight),\n          left = Math.max (0, scrollLeft - offscreenWidth),\n          bottom = Math.min (this.props.treeLayout.treeHeight, scrollTop + clientHeight + offscreenHeight),\n          right = Math.min (this.props.alignLayout.alignWidth, scrollLeft + clientWidth + offscreenWidth),\n          width = right - left,\n          height = bottom - top\n    return { top, left, bottom, right, width, height }\n  }\n  \n  setClientSize (clientWidth, clientHeight) {\n    if (clientWidth !== this.state.clientWidth\n        || clientHeight !== this.state.clientHeight)\n      this.setState ({ clientWidth, clientHeight })\n  }\n  \n  componentDidMount() {\n    this.renderVisibleRegion()\n  }\n  \n  componentDidUpdate() {\n    this.renderVisibleRegion()\n  }\n\n  renderVisibleRegion() {\n    const alignCanvas = this.canvasRef.current\n    const ctx = alignCanvas.getContext('2d')\n    const { top, left, bottom, right } = this.getDimensions()\n    const { computedFontConfig, treeLayout, alignLayout, treeIndex, alignIndex, data } = this.props\n    const { rowData } = data\n    ctx.setTransform (1, 0, 0, 1, 0, 0)\n    ctx.globalAlpha = 1\n    ctx.clearRect (0, 0, alignCanvas.width, alignCanvas.height)\n    ctx.font = computedFontConfig.charFont\n    let firstRow, lastRow  // firstRow is first (partially) visible row, lastRow is last (partially) visible row\n    for (let row = firstRow = 0; row < treeLayout.rowHeight.length && treeLayout.rowY[row] < bottom; ++row) {\n      if (treeLayout.rowY[row] < top)\n        firstRow = row\n      lastRow = row\n    }\n    let colX = 0\n    for (let col = 0; col < alignIndex.columns && colX < right; ++col) {\n      const xScale = alignLayout.computedColScale[col],\n            colX = alignLayout.colX[col],\n            width = alignLayout.colWidth[col]\n      if (xScale && colX + width >= left)\n        for (let row = firstRow; row <= lastRow; ++row) {\n          const yScale = treeLayout.computedRowScale[row],\n                rowY = treeLayout.rowY[row],\n                height = treeLayout.rowHeight[row],\n                seq = rowData[treeIndex.nodes[row]]\n          if (height && seq) {\n            ctx.globalAlpha = Math.min (xScale, yScale)\n            const c = seq[col]\n            if (typeof(c) === 'string') {\n              ctx.setTransform (xScale, 0, 0, yScale, colX - left, rowY + height - top)\n              ctx.fillStyle = this.getColor (c)\n              ctx.fillText (c, 0, 0)\n            } else {\n              let psum = 0\n              c.forEach ((cp) => {\n                const ci = cp[0], p = cp[1]\n                ctx.setTransform (xScale, 0, 0, yScale * p, colX - left, rowY + height*(1-psum) - top)\n                ctx.fillStyle = this.getColor (ci)\n                ctx.fillText (ci, 0, 0)\n                psum += p\n              })\n            }\n          }\n        }\n    }\n  }\n}\n\nexport default MSAAlignCanvas;\n","import React, { Component } from 'react';\n\nimport MSAAlignCanvas from './MSAAlignCanvas';\n\nclass MSAAlignRows extends Component {\n  \n  constructor(props) {\n    super(props);\n    this.rowsDivRef = React.createRef()\n    this.alignCanvasRef = React.createRef()\n  }\n\n  render() {\n    const { treeHeight } = this.props.treeLayout\n    const { alignWidth } = this.props.alignLayout\n\n    return (<div className=\"MSA-alignment-rows\"\n            ref={this.rowsDivRef}\n            onClick={this.handleClick.bind(this)}\n            onScroll={this.handleScroll.bind(this)}>\n\n            <MSAAlignCanvas\n            ref={this.alignCanvasRef}\n            data={this.props.data}\n            treeIndex={this.props.treeIndex}\n            alignIndex={this.props.alignIndex}\n            treeLayout={this.props.treeLayout}\n            alignLayout={this.props.alignLayout}\n            computedFontConfig={this.props.computedFontConfig}\n            scrollLeft={this.props.scrollLeft}\n            scrollTop={this.props.scrollTop}\n            />\n\n            {this.props.hoverColumn !== null\n             ? (<div className=\"MSA-alignment-column-cursor\"\n                style={{ left: this.props.alignLayout.colX[this.props.hoverColumn],\n                         top: 0,\n                         width: this.props.alignLayout.colWidth[this.props.hoverColumn],\n                         height: this.props.treeLayout.treeHeight }}/>)\n             : ''}\n\n            <div className=\"MSA-alignment-rows-back\"\n            style={{ width: alignWidth,\n                     height: treeHeight }}\n            onMouseMove={this.handleMouseMove.bind(this)}\n            onMouseLeave={this.handleMouseLeave.bind(this)}\n            onMouseDown={this.handleMouseDown.bind(this)}\n            />\n\n            </div>)\n  }\n\n  componentDidUpdate() {\n    this.setScrollPos()\n    this.setClientSize()\n  }\n  \n  componentDidMount() {\n    this.setScrollPos()\n    this.setClientSize()\n    window.addEventListener ('resize', this.setClientSize.bind(this))\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener ('resize', this.setClientSize.bind(this))\n  }\n\n  setClientSize() {\n    this.props.setClientSize (this.rowsDivRef.current.clientWidth,\n                              this.rowsDivRef.current.clientHeight)\n    this.alignCanvasRef.current.setClientSize (this.rowsDivRef.current.clientWidth,\n                                               this.rowsDivRef.current.clientHeight)\n  }\n  \n  setScrollPos (opts) {\n    opts = opts || this.props\n    this.rowsDivRef.current.scrollLeft = opts.scrollLeft\n    this.rowsDivRef.current.scrollTop = opts.scrollTop\n  }\n\n  handleClick (evt) {\n    this.props.handleAlignCharClick (this.resolveAlignCoords (evt))\n  }\n\n  handleMouseMove (evt) {\n    const coords = this.resolveAlignCoords (evt)\n    if (!this.lastCoords || coords.row !== this.lastCoords.row || coords.column !== this.lastCoords.column) {\n      this.props.handleAlignCharMouseOut (this.lastCoords)\n      this.props.handleAlignCharMouseOver (coords)\n      this.lastCoords = coords\n    }\n  }\n\n  handleMouseLeave (evt) {\n    this.props.handleMouseLeave (evt)\n  }\n\n  handleMouseDown (evt) {\n    this.props.handleMouseDown (evt)\n  }\n\n  handleScroll (evt) {\n    this.props.handleScroll (this.rowsDivRef.current.scrollLeft,\n                             this.rowsDivRef.current.scrollTop)\n  }\n\n  resolveAlignCoords (evt) {\n    const { treeIndex, alignIndex, treeLayout, alignLayout, data } = this.props\n    const { rowData } = data\n    const x = parseInt (evt.nativeEvent.offsetX),\n          y = parseInt (evt.nativeEvent.offsetY)\n    let row, column\n    for (row = 0; row < treeIndex.nodes.length - 1; ++row)\n      if (treeLayout.rowY[row] <= y && treeLayout.rowY[row] + treeLayout.rowHeight[row] > y)\n        break\n    for (column = 0; column < alignIndex.columns - 1; ++column)\n      if (alignLayout.colX[column] <= x && alignLayout.colX[column] + alignLayout.colWidth[column] > x)\n        break\n    const node = treeIndex.nodes[row],\n          colToSeqPos = alignIndex.alignColToSeqPos[node],\n          seqPos = colToSeqPos && colToSeqPos[column],\n          seq = rowData[node],\n          c = seq && seq[column],\n          isGap = this.props.isGapChar(c)\n    return { row, column, node, seqPos, c, isGap }\n  }\n}\n\nexport default MSAAlignRows;\n","import React, { Component } from 'react';\nimport { Select, MenuItem } from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { isArray } from 'lodash';\nimport pv from 'bio-pv';\n\nclass MSAStruct extends Component {\n\n  constructor(props) {\n    super(props);\n    this.pvDivRef = React.createRef()\n  }\n\n  render() {\n    const wantStructure = isArray(this.props.structure.structureInfo)\n    const structureID = !wantStructure && this.props.structure.structureInfo.pdb\n    return (<div\n            className=\"MSA-structure\"\n            style={{width: this.props.config.width,\n                    height: this.props.config.height}}\n            >\n\n            <div className=\"MSA-structure-name\">\n            {this.props.structure.node}\n            </div>\n\n            { structureID\n              && (<div className=\"MSA-structure-label\">\n                  {structureID}\n                  </div>) }\n\n            <div className=\"MSA-structure-top\">\n            { wantStructure\n              && (<Select\n                  value=''\n                  displayEmpty\n                  onChange={this.handleSelectStructure.bind(this)}\n                  >\n                  <MenuItem value='' disabled>\n                  Select a structure\n                  </MenuItem>\n                  {this.props.structure.structureInfo.map ((info, n) => (<MenuItem key={n} value={info}>{info.pdb}</MenuItem>))}\n                  </Select>\n                 ) }\n            <div className=\"MSA-structure-close-button\">\n            <CloseIcon onClick={this.handleClose.bind(this)}/>\n            </div>\n            </div>\n            \n            <div\n            className=\"MSA-structure-pv\"\n            ref={this.pvDivRef}\n            />\n            \n            </div>)\n  }\n\n  getPvConfig (structureConfig) {\n    const { width, height } = structureConfig\n    return (structureConfig.pvConfig\n            || { width,\n                 height,\n                 antialias: true,\n                 quality : 'medium' })\n  }\n\n  pdbUrlPrefix() { return 'https://files.rcsb.org/download/' }\n  pdbUrlSuffix() { return '.pdb' }\n  \n  componentDidMount() {\n    this.updatePv()\n  }\n\n  componentDidUpdate() {\n    this.updatePv()\n  }\n\n  updatePv() {\n    if (!isArray (this.props.structure.structureInfo))\n      this.loadStructure()\n  }\n  \n  handleSelectStructure (evt) {\n    this.props.updateStructure ({ structureInfo: evt.target.value })\n  }\n  \n  loadStructure() {\n    if (!this.props.structure.pdbFetchInitiated) {\n      this.props.updateStructure ({ pdbFetchInitiated: true })\n      const structureConfig = this.props.config\n      const pvConfig = this.getPvConfig (structureConfig)\n      const viewer = pv.Viewer (this.pvDivRef.current, pvConfig)\n      const loadFromPDB = !structureConfig.noRemoteStructures\n      const pdbFilePath = ((loadFromPDB\n                            ? this.pdbUrlPrefix()\n                            : (structureConfig.pdbPrefix || ''))\n                           + this.props.structure.structureInfo.pdb\n                           + (loadFromPDB\n                              ? this.pdbUrlSuffix()\n                              : (structureConfig.pdbSuffix || '')))\n      pv.io.fetchPdb (pdbFilePath, (pdb) => {\n        // display the protein as cartoon, coloring the secondary structure\n        // elements in a rainbow gradient.\n        this.props.updateStructure ({ pdb, viewer })\n        this.props.setViewType()\n        viewer.centerOn(pdb)\n        viewer.autoZoom()\n\n        this.pvDivRef.current.addEventListener ('mousemove', (evt) => {\n          const rect = viewer.boundingClientRect()\n          const picked = viewer.pick ({ x : evt.clientX - rect.left,\n                                        y : evt.clientY - rect.top })\n          if (picked) {\n            const target = picked.target(), residue = target.residue(), seqPos = residue.num(), chain = residue.chain().name()\n            this.props.handleMouseoverResidue (chain, seqPos)\n          } else\n            this.props.handleMouseoverResidue (null, null)\n        })\n\n        this.pvDivRef.current.addEventListener ('mouseleave', (evt) => {\n          this.props.handleMouseoverResidue (null, null)\n        })\n      })\n    }\n  }\n\n  handleClose (evt) {\n    evt.preventDefault();\n    this.props.handleCloseStructure (this.props.structure)\n  }\n}\n\nexport default MSAStruct;\n","import React, { Component } from 'react';\nimport { isArray } from 'lodash';\nimport pv from 'bio-pv';\n\nimport { Select, MenuItem, FormControlLabel, Checkbox } from '@material-ui/core';\n\nimport MSAStruct from './MSAStruct';\n\nclass MSAStructPanel extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { config: this.props.initConfig,\n                   viewMode: 'cartoon',\n                   colorScheme: 'ssSuccession' }\n  }\n  \n  render() {\n    return (this.props.structures.length\n            ? (<div className=\"MSA-structure-panel\">\n\n               <div className=\"MSA-structure-controls\">\n               \n               <Select\n               value={this.state.viewMode}\n               onChange={this.handleSelectViewType.bind(this)}\n               >\n               <MenuItem value='cartoon'>Cartoons</MenuItem>\n               <MenuItem value='tube'>Tube</MenuItem>\n               <MenuItem value='spheres'>Spheres</MenuItem>\n               <MenuItem value='ballsAndSticks'>Balls and sticks</MenuItem>\n               </Select>\n               \n               <Select\n               value={this.state.colorScheme}\n               onChange={this.handleSelectColorScheme.bind(this)}\n               >\n               <MenuItem value='uniform'>Uniform</MenuItem>\n               <MenuItem value='byChain'>Chain</MenuItem>\n               <MenuItem value='bySS'>Secondary structure</MenuItem>\n               <MenuItem value='ssSuccession'>Secondary structure gradient</MenuItem>\n               <MenuItem value='rainbow'>Rainbow</MenuItem>\n               </Select>\n\n               <FormControlLabel\n               control={<Checkbox\n                        checked={this.state.config.showMouseoverLabel}\n                        onChange={this.handleMouseoverLabelConfig.bind(this)}/>}\n               label=\"Show label on hover\"\n               />\n\n               </div>\n\n               <div className=\"MSA-structures\">\n               {this.props.structures.map ((structure) => {\n                 return (<MSAStruct\n                         key={structure.key}\n                         structure={structure}\n                         config={this.state.config}\n                         setViewType={()=>this.setViewType(structure)}\n                         updateStructure={(info) => this.props.updateStructure(structure,info)}\n                         handleCloseStructure={this.props.handleCloseStructure}\n                         handleMouseoverResidue={(chain,pdbSeqPos)=>this.props.handleMouseoverResidue(structure,chain,pdbSeqPos)}\n                         />)\n               })}\n               </div>\n\n               </div>)\n            : '')\n  }\n\n  handleMouseoverLabelConfig (event) {\n    let config = this.state.config\n    config.showMouseoverLabel = event.target.checked\n    this.setState ({ config })\n  }\n  \n  redrawStructureDelay() { return 500 }\n\n  setViewType (structure, viewMode, colorScheme) {\n    viewMode = viewMode || this.state.viewMode\n    colorScheme = colorScheme || this.state.colorScheme\n    const { pdb, viewer } = structure\n    if (viewer) {\n      viewer.clear()\n      const geometry = viewer.renderAs ('protein', pdb, viewMode, { color : pv.color[colorScheme]() })\n      this.props.updateStructure (structure, { geometry })\n    }\n    this.props.structures.forEach ((s) => {\n      this.props.updateStructure (s, { trueAtomColor: {} })\n    })\n    this.requestRedrawStructures()\n  }\n\n  handleSelectViewType (evt) {\n    const viewMode = evt.target.value\n    this.setState ({ viewMode })\n    this.props.structures.forEach ((s) => this.setViewType (s, viewMode))\n  }\n\n  handleSelectColorScheme (evt) {\n    const colorScheme = evt.target.value\n    this.setState ({ colorScheme })\n    this.props.structures.forEach ((s) => this.setViewType (s, undefined, colorScheme))\n  }\n  \n  addLabelToStructuresOnMouseover (column) {\n    const labelConfig = this.state.config.label || { font: 'sans-serif',\n                                                     fontSize : 12,\n                                                     fontColor: '#f62',\n                                                     fillStyle: 'white',\n                                                     backgroundAlpha : 0.4 }\n    const atomHighlightColor = this.state.config.atomHighlightColor || 'red'\n    this.props.structures.forEach ((s) => {\n      const colToSeqPos = this.props.alignIndex.alignColToSeqPos[s.node]\n      const seqCoords = this.props.seqCoords[s.node] || { startPos: 1 }\n      if (colToSeqPos) {\n        const seqPos = colToSeqPos[column]\n        this.removeMouseoverLabels (s)\n        if (!isArray (s.structureInfo))\n          s.structureInfo.chains.forEach ((chainInfo) => {\n            const pdbSeqPos = seqPos + seqCoords.startPos\n            if ((!chainInfo.startPos || pdbSeqPos >= chainInfo.startPos)\n                && (!chainInfo.endPos || pdbSeqPos <= chainInfo.endPos)) {\n              const pdbChain = chainInfo.chain\n              const residues = s.pdb.residueSelect ((res) => {\n                return res.num() === pdbSeqPos\n                  && (typeof(pdbChain) === 'undefined' || res.chain().name() === pdbChain)\n              })\n              if (residues) {\n                residues.eachResidue ((res) => {\n                  const label = 'mouseover' + (s.mouseoverLabel.length + 1)\n                  if (this.state.config.showMouseoverLabel)\n                    s.viewer.label (label, res.qualifiedName(), res.centralAtom().pos(), labelConfig)\n                  res.atoms().forEach ((atom) => {\n                    if (!s.trueAtomColor[atom.index()]) {\n                      const atomColor = [0, 0, 0, 0]\n                      s.geometry.getColorForAtom (atom, atomColor)\n                      s.trueAtomColor[atom.index()] = atomColor\n                    }\n                  })\n                  this.setColorForAtoms (s.geometry, res.atoms(), atomHighlightColor)\n                  s.mouseoverLabel.push ({ label, res })\n                })\n              }\n            }\n          })\n      }\n    })\n    this.requestRedrawStructures()\n  }\n\n  removeLabelFromStructuresOnMouseout() {\n    this.props.structures.forEach ((s) => {\n      this.removeMouseoverLabels (s)\n    })\n    this.requestRedrawStructures()\n  }\n\n  removeMouseoverLabels (structure) {\n    structure.mouseoverLabel.forEach ((labelInfo) => {\n      if (this.state.config.showMouseoverLabel)\n        structure.viewer.rm (labelInfo.label)\n      let byColor = {}\n      labelInfo.res.atoms().forEach ((atom) => {\n        const trueColor = structure.trueAtomColor[atom.index()], colorString = trueColor.toString()\n        byColor[colorString] = byColor[colorString] || { trueColor, atoms: [] }\n        byColor[colorString].atoms.push (atom)\n      })\n      Object.keys(byColor).forEach ((col) => this.setColorForAtoms (structure.geometry, byColor[col].atoms, byColor[col].trueColor))\n    })\n    structure.mouseoverLabel = []\n  }\n\n  setColorForAtoms (go, atoms, color) {\n    let view = go.structure().createEmptyView()\n    atoms.forEach ((atom) => view.addAtom (atom))\n    go.colorBy (pv.color.uniform(color), view)\n  }\n\n  // delayed request to redraw structure\n  requestRedrawStructures() {\n    this.props.setTimer ('redraw', this.redrawStructureDelay(), () => {\n      this.props.structures.filter ((s) => s.viewer).forEach ((s) => s.viewer.requestRedraw())\n    })\n  }\n}\n\nexport default MSAStructPanel;\n","import React, { Component } from 'react';\nimport { extend, isArray } from 'lodash';\n\nimport MSATree from './MSATree';\nimport MSAAlignNames from './MSAAlignNames';\nimport MSAAlignRows from './MSAAlignRows';\nimport MSAStructPanel from './MSAStructPanel';\n\nclass MSA extends Component {\n  constructor(props) {\n    super(props);\n\n    const view = extend (this.initialView(),\n                         props.view || {})\n\n    this.state = extend ({ scrollTop: 0,\n                           alignScrollLeft: 0,\n                           hoverColumn: null },\n                         { view });\n\n    this.rowsRef = React.createRef()\n    this.msaRef = React.createRef()\n    this.structRef = React.createRef()\n  }\n\n  // config/defaults\n  initialView() {\n    return {\n      collapsed: {},   // true if an internal node has been collapsed by the user\n      forceDisplayNode: {},   // force a node to be displayed even if it's flagged as collapsed. Used by animation code\n      nodeScale: {},  // height scaling factor for tree nodes / alignment rows. From 0 to 1 (undefined implies 1)\n      columnScale: {},  // height scaling factor for alignment columns. From 0 to 1 (undefined implies 1)\n      disableTreeEvents: false,\n      animating: false,\n      structure: { openStructures: [] }\n    } }\n\n  collapseAnimationFrames() { return 10 }\n  collapseAnimationDuration() { return 200 }\n  collapseAnimationMaxFrameSkip() { return 8 }\n\n  mouseoverLabelDelay() { return 100 }\n\n  resetView() {\n    this.setState ({ view: this.initialView() })\n  }\n  \n  // get tree collapsed/open state\n  getComputedView (view) {\n    view = view || this.state.view\n    const { treeIndex, alignIndex } = this.props\n    const { collapsed, forceDisplayNode } = view\n    const { rowDataAsArray } = alignIndex\n    let ancestorCollapsed = {}, nodeVisible = {}\n    const setCollapsedState = (node, parent) => {\n      ancestorCollapsed[node] = ancestorCollapsed[parent] || collapsed[parent]\n      const kids = treeIndex.children[node]\n      if (kids)\n        kids.forEach ((child) => setCollapsedState (child, node))\n    }\n    setCollapsedState (treeIndex.root)\n    treeIndex.nodes.forEach ((node) => nodeVisible[node] = (!ancestorCollapsed[node]\n                                                              && (treeIndex.children[node].length === 0\n                                                                  || forceDisplayNode[node])))\n    let columnVisible = new Array(alignIndex.columns).fill(false)\n    treeIndex.nodes.filter ((node) => nodeVisible[node]).forEach ((node) => {\n      if (rowDataAsArray[node])\n        rowDataAsArray[node].forEach ((c, col) => { if (!this.props.isGapChar(c)) columnVisible[col] = true })\n    })\n    return extend ({ ancestorCollapsed, nodeVisible, columnVisible },\n                   view)\n  }\n  \n  // layout tree\n  layoutTree (computedView) {\n    const { computedTreeConfig, treeIndex } = this.props\n    const { nodeVisible, nodeScale } = computedView\n    const { genericRowHeight, nodeHandleRadius, treeStrokeWidth, availableTreeWidth } = computedTreeConfig\n    let nx = {}, ny = {}, computedRowScale = [], nodeHeight = {}, rowHeight = [], treeHeight = 0\n    const rowY = treeIndex.nodes.map ((node) => {\n      const scale = typeof(nodeScale[node]) !== 'undefined' ? nodeScale[node] : 1\n      const rh = scale * (nodeVisible[node] ? genericRowHeight : 0)\n      const y = treeHeight\n      nx[node] = nodeHandleRadius + treeStrokeWidth + availableTreeWidth * treeIndex.distFromRoot[node] / treeIndex.maxDistFromRoot\n      ny[node] = y + rh / 2\n      nodeHeight[node] = rh\n      computedRowScale.push (scale)\n      rowHeight.push (rh)\n      treeHeight += rh\n      return y\n    })\n    return { nx, ny, computedRowScale, nodeHeight, rowHeight, rowY, treeHeight, computedView }\n  }\n\n  // get metrics and other info about alignment font/chars, and do layout\n  layoutAlignment (computedView) {\n    const { alignIndex, computedFontConfig } = this.props\n    const { genericRowHeight, charFont } = computedFontConfig\n    const alignChars = alignIndex.chars\n    let charWidth = 0, charMetrics = {}\n    alignChars.forEach ((c) => {\n      let measureCanvas = this.create ('canvas', null, null, { width: genericRowHeight, height: genericRowHeight })\n      let measureContext = measureCanvas.getContext('2d')\n      measureContext.font = charFont\n      charMetrics[c] = measureContext.measureText (c)\n      charWidth = Math.max (charWidth, Math.ceil (charMetrics[c].width))\n    })\n    const charHeight = genericRowHeight\n\n    let nextColX = 0, colX = [], colWidth = [], computedColScale = []\n    for (let col = 0; col < alignIndex.columns; ++col) {\n      colX.push (nextColX)\n      if (computedView.columnVisible[col]) {\n        let scale = computedView.columnScale[col]\n        if (typeof(scale) === 'undefined')\n          scale = 1\n        computedColScale.push (scale)\n        const width = scale * charWidth\n        colWidth.push (width)\n        nextColX += width\n      } else {\n        computedColScale.push (0)\n        colWidth.push (0)\n      }\n    }\n\n    return { charMetrics, charWidth, charHeight, colX, colWidth, computedColScale, alignWidth: nextColX }\n  }\n\n  // helper to create DOM element (for measurement purposes, or non-React components)\n  create (type, parent, styles, attrs) {\n    const element = document.createElement (type)\n    if (parent)\n      parent.appendChild (element)\n    if (attrs)\n      Object.keys(attrs).filter ((attr) => typeof(attrs[attr]) !== 'undefined').forEach ((attr) => element.setAttribute (attr, attrs[attr]))\n    if (styles)\n      element.style = styles\n    return element\n  }\n  \n  render() {\n    const computedView = this.getComputedView()\n    const treeLayout = this.layoutTree (computedView)\n    const alignLayout = this.layoutAlignment (computedView)\n\n    // record the dimensions for drag handling\n    this.treeHeight = treeLayout.treeHeight\n    this.alignWidth = alignLayout.alignWidth\n    \n    return (\n        <div className=\"MSA\"\n      style={{ width: this.props.config.containerWidth,\n               height: this.props.config.containerHeight }}>\n\n        <div className=\"MSA-tree-alignment\"\n      ref={this.msaRef}\n      onMouseDown={this.handleMouseDown.bind(this)}\n      style={{ width: this.props.config.containerWidth,\n               height: treeLayout.treeAlignHeight }}>\n\n        <MSATree\n      config={this.props.config}\n      computedTreeConfig={this.props.computedTreeConfig}\n      treeIndex={this.props.treeIndex}\n      treeLayout={treeLayout}\n      computedView={computedView}\n      scrollTop={this.state.scrollTop}\n      handleNodeClick={this.handleNodeClick.bind(this)}\n        />\n\n        <MSAAlignNames\n      data={this.props.data}\n      view={this.state.view}\n      config={this.props.config}\n      computedFontConfig={this.props.computedFontConfig}\n      treeIndex={this.props.treeIndex}\n      alignIndex={this.props.alignIndex}\n      treeLayout={treeLayout}\n      alignLayout={alignLayout}\n      computedView={computedView}\n      scrollTop={this.state.scrollTop}\n      handleNameClick={this.handleNameClick.bind(this)}\n        />\n      \n        <MSAAlignRows\n      ref={this.rowsRef}\n      data={this.props.data}\n      view={this.state.view}\n      config={this.props.config}\n      computedFontConfig={this.props.computedFontConfig}\n      treeIndex={this.props.treeIndex}\n      alignIndex={this.props.alignIndex}\n      isGapChar={this.props.isGapChar}\n      treeLayout={treeLayout}\n      alignLayout={alignLayout}\n      setClientSize={this.setAlignmentClientSize.bind(this)}\n      handleScroll={this.handleAlignmentScroll.bind(this)}\n      handleMouseDown={this.handleAlignmentMouseDown.bind(this)}\n      handleAlignCharClick={this.handleAlignCharClick.bind(this)}\n      handleAlignCharMouseOver={this.handleAlignCharMouseOver.bind(this)}\n      handleAlignCharMouseOut={this.handleAlignCharMouseOut.bind(this)}\n      handleMouseLeave={()=>this.delayedSetHoverColumn(null)}\n      scrollLeft={this.state.alignScrollLeft}\n      scrollTop={this.state.scrollTop}\n      hoverColumn={this.state.hoverColumn}\n        />\n        </div>\n\n        <MSAStructPanel\n      ref={this.structRef}\n      initConfig={this.props.config.structure}\n      seqCoords={this.props.data.seqCoords}\n      alignIndex={this.props.alignIndex}\n      structures={this.state.view.structure.openStructures}\n      updateStructure={this.updateStructure.bind(this)}\n      handleCloseStructure={this.handleCloseStructure.bind(this)}\n      handleMouseoverResidue={this.handleMouseoverStructureResidue.bind(this)}\n      setTimer={this.setTimer.bind(this)}\n        />\n\n      </div>\n    )\n  }\n\n  componentDidMount() {\n    window.addEventListener ('mouseleave', this.handleMouseLeave.bind(this))\n    window.addEventListener ('mouseup', this.handleMouseUp.bind(this))\n    window.addEventListener ('mousemove', this.handleMouseMove.bind(this))\n    this.msaRef.current.addEventListener ('wheel', this.handleMouseWheel.bind(this), { passive: false })\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener ('mouseleave', this.handleMouseLeave.bind(this))\n    window.removeEventListener ('mouseup', this.handleMouseUp.bind(this))\n    window.removeEventListener ('mousemove', this.handleMouseMove.bind(this))\n    this.msaRef.current.removeEventListener ('wheel', this.handleMouseWheel.bind(this))\n  }\n\n  setAlignmentClientSize (w, h) {\n    this.alignmentClientWidth = w\n    this.alignmentClientHeight = h\n  }\n\n  handleNameClick (node) {\n    const { structure } = this.props.data\n    this.nStructs = (this.nStructs || 0) + 1\n    let info = structure[node]\n    if (isArray(info) && info.length === 1)\n      info = info[0]\n    const newStructure = { node,\n                           structureInfo: info,\n                           startPos: this.props.data.seqCoords[node].startPos,\n                           mouseoverLabel: [],\n                           trueAtomColor: {},\n                           key: this.nStructs }\n    let view = this.state.view\n    view.structure.openStructures.push (newStructure)\n    this.setState ({ view })\n  }\n\n  updateStructure (structure, newStructure) {\n    let view = this.state.view\n    view.structure.openStructures = view.structure.openStructures\n      .map ((s) => (s === structure\n                    ? extend (s, newStructure)\n                    : s))\n    this.setState ({ view })\n  }\n\n  handleCloseStructure (structure) {\n    let view = this.state.view\n    view.structure.openStructures = view.structure.openStructures.filter ((s) => s !== structure)\n    this.setState ({ view })\n  }\n  \n  handleNodeClick (node) {\n    if (this.scrolling) {\n      this.scrolling = false\n      return\n    }\n    if (this.state.disableTreeEvents)\n      return\n\n    const { treeIndex, alignIndex } = this.props\n    const computedView = this.getComputedView()\n    const { collapsed, nodeScale, columnScale, forceDisplayNode, columnVisible } = computedView\n\n    const alignLayout = this.layoutAlignment (computedView)\n    const left = this.state.alignScrollLeft, right = left + this.alignmentClientWidth\n\n    const collapseAnimationFrames = this.collapseAnimationFrames()\n    let framesLeft = collapseAnimationFrames\n\n    const wasCollapsed = collapsed[node], finalCollapsed = extend ({}, collapsed)\n    if (wasCollapsed) {\n      collapsed[node] = false  // when collapsed[node]=false (vs undefined), it's rendered by renderTree() as a collapsed node, but its descendants are still visible. A bit of a hack...\n      delete finalCollapsed[node]\n    } else\n      finalCollapsed[node] = true\n    const finalForceDisplayNode = extend ({}, forceDisplayNode)\n    finalForceDisplayNode[node] = !wasCollapsed\n    const finalComputedView = this.getComputedView ({ collapsed: finalCollapsed, forceDisplayNode: finalForceDisplayNode })\n    let newlyVisibleColumns = [], newlyHiddenColumns = [], persistingVisibleColumns = []\n    for (let col = 0; col < alignIndex.columns; ++col) {\n      if (finalComputedView.columnVisible[col] !== columnVisible[col])\n        (finalComputedView.columnVisible[node] ? newlyVisibleColumns : newlyHiddenColumns).push (col)\n      const colX = alignLayout.colX[col], colWidth = alignLayout.colWidth[col]\n      if (columnVisible[col] && finalComputedView.columnVisible[col] && colX >= left && colX + colWidth < right)\n        persistingVisibleColumns.push (col)\n    }\n    const centroidMinusScroll = this.centroidOfColumns (persistingVisibleColumns, alignLayout) - this.state.alignScrollLeft\n\n    let lastFrameTime = Date.now()\n    const expectedTimeBetweenFrames = this.collapseAnimationDuration() / collapseAnimationFrames\n    const drawAnimationFrame = () => {\n      let disableTreeEvents, animating, newCollapsed = collapsed\n      if (framesLeft) {\n        const scale = (wasCollapsed ? (collapseAnimationFrames + 1 - framesLeft) : framesLeft) / (collapseAnimationFrames + 1)\n        treeIndex.descendants[node].forEach ((desc) => { nodeScale[desc] = scale })\n        nodeScale[node] = 1 - scale\n        newlyHiddenColumns.forEach ((col) => columnScale[col] = scale)\n        newlyVisibleColumns.forEach ((col) => columnScale[col] = 1 - scale)\n        forceDisplayNode[node] = true\n        disableTreeEvents = true\n        animating = true\n      } else {\n        treeIndex.descendants[node].forEach ((desc) => { delete nodeScale[desc] })\n        delete nodeScale[node]\n        newlyHiddenColumns.forEach ((col) => delete columnScale[col])\n        newlyVisibleColumns.forEach ((col) => delete columnScale[col])\n        forceDisplayNode[node] = !wasCollapsed\n        newCollapsed = finalCollapsed\n        disableTreeEvents = false\n        animating = false\n      }\n      const view = extend ({}, this.state.view, { collapsed: newCollapsed, forceDisplayNode, nodeScale, columnScale, disableTreeEvents, animating })\n      const computedView = this.getComputedView (view), alignLayout = this.layoutAlignment (computedView)\n      const alignScrollLeft = this.boundAlignScrollLeft (this.centroidOfColumns (persistingVisibleColumns, alignLayout) - centroidMinusScroll)\n      window.requestAnimationFrame (() => {\n        this.setState ({ alignScrollLeft, view })\n        \n        if (framesLeft) {\n          const currentTime = Date.now(),\n                timeSinceLastFrame = currentTime - lastFrameTime,\n                timeToNextFrame = Math.max (0, expectedTimeBetweenFrames - timeSinceLastFrame),\n                frameSkip = Math.min (this.collapseAnimationMaxFrameSkip(), Math.ceil (timeSinceLastFrame / expectedTimeBetweenFrames))\n          framesLeft = Math.max (0, framesLeft - frameSkip)\n          lastFrameTime = currentTime\n          setTimeout (drawAnimationFrame, timeToNextFrame)\n        }\n      })\n    }\n                                    \n    drawAnimationFrame (collapseAnimationFrames)\n  }\n\n  handleAlignmentScroll (alignScrollLeft, scrollTop) {\n    if (alignScrollLeft !== this.state.alignScrollLeft\n        || scrollTop !== this.state.scrollTop)\n      this.setState ({ alignScrollLeft, scrollTop })\n  }\n\n  handleMouseWheel (evt) {\n    // nonzero deltaMode is Firefox, means deltaY is in lines instead of pixels\n    // can be corrected for e.g. https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n    if (evt.deltaY !== 0) {\n      const deltaY = evt.deltaY * (evt.deltaMode ? this.props.config.genericRowHeight : 1)\n      evt.preventDefault()\n      this.requestAnimationFrame (() => {\n        this.setState ({ alignScrollLeft: this.incAlignScrollLeft (evt.deltaX),\n                         scrollTop: this.incScrollTop (deltaY) })\n      })\n    }\n  }\n\n  handleMouseDown (evt) {\n    this.mouseDown = true\n    this.lastY = evt.pageY\n  }\n\n  handleAlignmentMouseDown (evt) {\n    this.alignMouseDown = true\n    this.lastX = evt.pageX\n  }\n\n  handleAlignCharClick (coords) {\n    if (!this.panning && !this.scrolling) {\n//      console.warn('click',coords)\n    }\n    this.panning = this.scrolling = false\n  }\n\n  handleAlignCharMouseOver (coords) {\n    if (!this.panning && !this.scrolling) {\n      this.delayedSetHoverColumn (coords.column)\n//      console.warn('mouseover',coords)\n    }\n  }\n\n  handleAlignCharMouseOut (coords) {\n    if (!this.panning && !this.scrolling) {\n//      console.warn('mouseout',coords)\n    }\n  }\n\n  delayedSetHoverColumn (column) {\n    this.setMouseoverTimer (() => {\n      this.setHoverColumn (column)\n    })\n  }\n\n  setMouseoverTimer (callback) {\n    this.setTimer ('mouseover', this.mouseoverLabelDelay(), () => window.requestAnimationFrame (callback))\n  }\n\n  setHoverColumn (column) {\n    this.setState ({ hoverColumn: column })\n    if (column === null)\n      this.structRef.current.removeLabelFromStructuresOnMouseout()\n    else\n      this.structRef.current.addLabelToStructuresOnMouseover (column)\n  }\n\n  handleMouseoverStructureResidue (structure, chain, pdbSeqPos) {\n    this.setMouseoverTimer (() => {\n      const seqPosToCol = this.props.alignIndex.seqPosToAlignCol[structure.node]\n      const chainInfo = structure.structureInfo.chains.find ((c) => c.chain === chain)\n      if (seqPosToCol && chainInfo && pdbSeqPos >= chainInfo.startPos && pdbSeqPos <= chainInfo.endPos) {\n        const seqPos = pdbSeqPos - chainInfo.startPos\n        const column = seqPosToCol[seqPos]\n        this.setHoverColumn (column)\n      } else\n        this.setHoverColumn (null)\n    })\n  }\n  \n  handleMouseLeave() {\n    this.alignMouseDown = false\n    this.mouseDown = false\n    this.panning = this.scrolling = false\n  }\n\n  handleMouseUp() {\n    this.alignMouseDown = false\n    this.mouseDown = false\n  }\n\n  centroidOfColumns (cols, alignLayout) {\n    return cols.length && (cols.reduce ((sum, col) => sum + alignLayout.colX[col] + (alignLayout.colWidth[col] / 2), 0) / cols.length)\n  }\n\n  incAlignScrollLeft (dx) {\n    return this.boundAlignScrollLeft (this.state.alignScrollLeft + dx)\n  }\n\n  incScrollTop (dy) {\n    return this.boundScrollTop (this.state.scrollTop + dy)\n  }\n\n  boundAlignScrollLeft (x) {\n    return Math.max (0, Math.min (this.alignWidth - this.alignmentClientWidth, x))\n  }\n\n  boundScrollTop (y) {\n    return Math.max (0, Math.min (this.treeHeight - this.alignmentClientHeight, y))\n  }\n\n  handleMouseMove (evt) {\n    if (this.alignMouseDown || this.mousedown)\n      evt.preventDefault()\n\n    let { alignScrollLeft, scrollTop } = this.state, updated = false\n    if (this.alignMouseDown) {\n      const dx = evt.pageX - this.lastX\n      if (dx) {\n        alignScrollLeft = this.incAlignScrollLeft (-dx)\n        this.panning = true\n        updated = true\n      }\n    } else\n      this.panning = false\n\n    if (this.mouseDown) {\n      const dy = evt.pageY - this.lastY\n      if (dy) {\n        scrollTop = this.incScrollTop (-dy)\n        this.scrolling = true\n        updated = true\n      }\n    } else\n      this.scrolling = false\n\n    if (updated)\n      this.requestAnimationFrame (() => {\n        this.setState ({ alignScrollLeft, scrollTop })\n        this.lastX = evt.pageX\n        this.lastY = evt.pageY\n      })\n  }\n\n  // request animation frame\n  requestAnimationFrame (callback) {\n    if (this.animationTimeout)\n      window.cancelAnimationFrame (this.animationTimeout)\n    this.animationTimeout = window.requestAnimationFrame (callback)\n  }\n\n  // set generic timer\n  setTimer (name, delay, callback) {\n    this.timer = this.timer || {}\n    this.clearTimer (this, name)\n    this.timer[name] = window.setTimeout (() => {\n      delete this.timer[name]\n      callback()\n    }, delay)\n  }\n\n  // clear generic timer\n  clearTimer (name) {\n    if (this.timer && this.timer[name]) {\n      window.clearTimeout (this.timer[name])\n      delete this.timer[name]\n    }\n  }\n}\n\nexport default MSA;\n","import React, { Component } from 'react';\nimport { Select, MenuItem } from '@material-ui/core';\nimport { extend, isArray } from 'lodash';\nimport queryString from 'query-string';\nimport colorSchemes from './colorSchemes'\nimport './App.css';\n\nimport { getAncestralReconstruction } from './reconstruction';\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport getAncestralReconstructionWorker from 'workerize-loader!./reconstruction';\n\nimport Stockholm from 'stockholm-js';\nimport { Newick } from 'newick';\nimport JukesCantor from 'jukes-cantor';\nimport RapidNeighborJoining from 'neighbor-joining';\n\nimport MSA from './MSA';\n\nclass App extends Component {\n  \n  constructor(props) {\n    super(props);\n    \n    // config\n    const config = extend (this.defaultConfig(), props.config || {})\n    const { genericRowHeight, nameFontSize, treeWidth, branchStrokeStyle, nodeHandleRadius, nodeHandleClickRadius, nodeHandleFillStyle, collapsedNodeHandleFillStyle, rowConnectorDash } = config\n\n    // tree configuration\n    const treeStrokeWidth = 1\n    const nodeHandleStrokeStyle = branchStrokeStyle\n    const availableTreeWidth = treeWidth - nodeHandleRadius - 2*treeStrokeWidth\n    const computedTreeConfig = { treeWidth, availableTreeWidth, genericRowHeight, branchStrokeStyle, nodeHandleStrokeStyle, nodeHandleRadius, nodeHandleClickRadius, nodeHandleFillStyle, collapsedNodeHandleFillStyle, rowConnectorDash, treeStrokeWidth }\n\n    // font configuration\n    const charFontName = 'Menlo,monospace'\n    const nameFontName = 'inherit'\n    const nameFontColor = 'black'\n    const charFont = genericRowHeight + 'px ' + charFontName\n    const color = config.color || colorSchemes[config.colorScheme]\n    const computedFontConfig = { charFont, charFontName, color, nameFontName, nameFontSize, nameFontColor, genericRowHeight }\n    \n    // state (we will select a dataset in componentDidMount())\n    this.state = { config,\n                   datasets: this.props.datasets || [],\n                   computedTreeConfig,\n                   computedFontConfig }\n\n    this.divRef = React.createRef()\n    this.inputRef = React.createRef()\n    this.msaRef = React.createRef()\n\n    window.onpopstate = (event) => {\n      if (event && event.state && event.state.data)\n        this.setDataset (event.state.data)\n      else\n        window.location.reload()\n    }\n  }\n\n  handleDragEnter (evt) {\n    evt.stopPropagation()\n    evt.preventDefault()\n  }\n\n  handleDragOver (evt) {\n    evt.stopPropagation()\n    evt.preventDefault()\n    evt.dataTransfer.dropEffect = 'copy'\n  }\n\n  handleDrop (evt) {\n    evt.stopPropagation()\n    evt.preventDefault()\n    this.openFiles (evt.dataTransfer.files)\n  }\n  \n  handleSelectDataset (evt) {\n    const name = evt.target.value\n    if (name) {\n      const nAlign = this.state.datasets.findIndex ((ds) => ds.name === name)\n      const data = this.state.datasets[nAlign]\n      this.setDataset (data)\n      this.msaRef.current.resetView()\n      if (nAlign < this.nDatasetsInitial) {  // don't URL-encode dataset if it's one we added after loading\n        let newState = queryString.parse (window.location.search)\n        delete newState[this.alignIdQueryParam]\n        delete newState[this.nAlignQueryParam]\n        if (data.id)\n          newState[this.alignIdQueryParam] = data.id\n        else\n          newState[this.nAlignQueryParam] = nAlign\n        window.history.pushState ({ data }, document.title, '?' + queryString.stringify (newState))\n      }\n    } else\n      this.inputRef.current.click()\n  }\n\n  handleSelectFile (evt) {\n    this.openFiles (evt.target.files)\n  }\n  \n  openFiles (files) {\n    return Promise.all (Array.from(files).map ((file) => this.openFile (file)))\n  }\n  \n  openFile (file) {\n    return new Promise ((resolve, reject) => {\n      const reader = new FileReader()\n      reader.onload = (e) => {\n        const text = e.target.result\n        this.addDatasets (text, true)\n        resolve()\n      }\n      reader.readAsText (file)\n    })\n  }\n\n  addDatasets (text, autoselect) {\n    const newAlignmentName = (n) => \"Alignment \" + (this.state.datasets.length + (n || 0) + 1);\n    let datasets = this.state.datasets\n    if (this.sniffStockholmRegex.test (text)) {\n      const stocks = Stockholm.parseAll (text)\n      datasets = datasets.concat (stocks.map ((stockholmjs, n) => {\n        let name\n        ['DE','ID','AC'].forEach ((tag) => {\n          if (!name && stockholmjs.gf[tag] && stockholmjs.gf[tag].length)\n            name = stockholmjs.gf[tag][0]\n        })\n        name = name || newAlignmentName(n)\n        const id = ['AC','ID'].reduce ((id, tag) => id || (stockholmjs.gf[tag] && stockholmjs.gf[tag][0]), undefined)\n        return { stockholmjs, name, id }\n      }))\n    } else {\n      try {\n        const json = JSON.parse (text)\n        if (isArray (json))\n          datasets = datasets.concat (json)\n        else\n          datasets.push (json)\n      } catch (e) {\n        datasets.push ({ auto: text,\n                         name: newAlignmentName() })\n      }\n    }\n    if (datasets.length > this.state.datasets.length) {\n      const firstDataset = datasets[this.state.datasets.length]\n      if (autoselect)\n        this.setDataset (firstDataset, { datasets })\n      else\n        this.setState ({ datasets })\n      if (this.msaRef.current)\n        this.msaRef.current.resetView()\n    }\n  }\n  \n  setDataset (data, extra) {\n    const datasetID = this.datasetsLoaded = (this.datasetsLoaded || 0) + 1\n    this.indexData (data)\n      .then ((dataWithIndices) => this.setState (extend ({ datasetID,\n                                                           reconstructingAncestors: false },\n                                                         dataWithIndices,\n                                                         extra || {})))\n  }\n\n  async indexData (suppliedData, suppliedConfig) {\n    const config = suppliedConfig || this.state.config\n    const data = await this.getData (config.cacheData ? suppliedData : extend ({}, suppliedData), config)\n    const treeIndex = this.buildTreeIndex (data)\n    const alignIndex = this.buildAlignmentIndex (data)\n    return { data, treeIndex, alignIndex }\n  }\n\n  // regexes\n  get pdbRegex() { return /PDB; +(\\S+) +(\\S); ([0-9]+)-([0-9]+)/; }   /* PFAM format for embedding PDB IDs in Stockholm files */\n  get nameEncodedCoordRegex() { return /\\/([0-9]+)-([0-9]+)$/; }   /* Pfam format for embedding coordinates in names (ugh) */\n  get sniffStockholmRegex() { return /^# STOCKHOLM/; }   /* regex for sniffing Stockholm format */\n  get sniffFastaRegex() { return /^>/; }   /* regex for sniffing FASTA format */\n\n  // method to get data & build tree if necessary\n  async getData (data, config) {\n    if (data.url)\n      await Promise.all (Object.keys (data.url)\n                         .filter (key => !data[key])\n                         .map ((key) => {\n                           const url = this.makeURL (data.url[key])\n                           return fetch (url).then (async (res) => {\n                             if (res.ok)\n                               data[key] = await res.text()\n                             else\n                               console.warn ('Error fetching ' + url, res.statusText)\n                           })}))\n    if (data.json)\n      extend (data, typeof(data.json) === 'string' ? JSON.parse(data.json) : data.json)\n    if (data.auto) {\n      if (this.sniffStockholmRegex.test (data.auto))\n        data.stockholm = data.auto\n      else if (this.sniffFastaRegex.test (data.auto))\n        data.fasta = data.auto\n      else {\n        try {\n          extend (data, JSON.parse (data.auto))\n        } catch (e) {\n          // do nothing if JSON didn't parse\n        }\n      }\n    }\n    if (!(data.branches && data.rowData)) {\n      if (data.stockholm)  // was a Stockholm-format alignment specified?\n        this.unpackStockholm (data, config, data.stockholm)\n      else if (data.stockholmjs)  // was a StockholmJS object specified?\n        this.unpackStockholmJS (data, config, data.stockholmjs)\n      else if (data.fasta)  // was a FASTA-format alignment specified?\n        data.rowData = this.parseFasta (data.fasta)\n      else\n        throw new Error (\"no sequence data\")\n      // If a Newick-format tree was specified somehow (as a separate data item, or in the Stockholm alignment) then parse it\n      if (data.newick || data.newickjs) {\n        const NewickParser = new Newick()\n        const newickTree = data.newickjs = data.newickjs || NewickParser.parse (data.newick)\n        let nodes = 0\n        const getName = (obj) => (obj.name = obj.name || ('node' + (++nodes)))\n        data.branches = []\n        const traverse = (parent) => {  // auto-name internal nodes\n          if (parent.branchset)\n            parent.branchset.forEach ((child) => {\n              data.branches.push ([getName(parent), getName(child), Math.max (child.length, 0)])\n              traverse (child)\n            })\n        }\n        traverse (newickTree)\n        data.root = getName (newickTree)\n      } else {  // no Newick tree was specified, so build a quick-and-dirty distance matrix with Jukes-Cantor, and get a tree by neighbor-joining\n        const taxa = Object.keys(data.rowData).sort(), seqs = taxa.map ((taxon) => data.rowData[taxon])\n        console.warn ('Estimating phylogenetic tree (' + taxa.length + ' taxa)...')\n        const distMatrix = JukesCantor.calcFiniteDistanceMatrix (seqs)\n        const rnj = new RapidNeighborJoining.RapidNeighborJoining (distMatrix, taxa.map ((name) => ({ name })))\n        rnj.run()\n        const tree = rnj.getAsObject()\n        let nodes = 0\n        const getName = (obj) => { obj.taxon = obj.taxon || { name: 'node' + (++nodes) }; return obj.taxon.name }\n        data.branches = []\n        const traverse = (parent) => {  // auto-name internal nodes\n          parent.children.forEach ((child) => {\n            data.branches.push ([getName(parent), getName(child), Math.max (child.length, 0)])\n            traverse (child)\n          })\n        }\n        traverse (tree)\n        data.root = getName (tree)\n      }\n    }\n    this.guessSeqCoords (data)  // this is an idempotent method; if data came from a Stockholm file, it's already been called (in order to filter out irrelevant structures)\n    return data\n  }\n\n    // Attempt to figure out start coords relative to database sequences by parsing the sequence names\n    // This allows us to align to partial structures\n    // This is pretty hacky; the user can alternatively pass these in through the data.seqCoords field\n  guessSeqCoords (data) {\n    if (!data.seqCoords)\n      data.seqCoords = {}\n    Object.keys (data.rowData).forEach ((name) => {\n      const seq = data.rowData[name], len = this.countNonGapChars (seq)\n      if (!data.seqCoords[name]) {\n        const coordMatch = this.nameEncodedCoordRegex.exec (name)\n        if (coordMatch) {\n          const startPos = parseInt(coordMatch[1]), endPos = parseInt(coordMatch[2])\n          if (endPos + 1 - startPos === len)\n            data.seqCoords[name] = { startPos, endPos }\n        }\n      }\n      if (!data.seqCoords[name])\n        data.seqCoords[name] = { startPos: 1, endPos: len }   // if we can't guess the start coord, just assume it's the full-length sequence\n    })\n  }\n  \n  makeURL (url) {\n    return url.replace ('%PUBLIC_URL%', process.env.PUBLIC_URL)\n  }\n  \n  unpackStockholm (data, config, stockholm) {\n    const stockjs = Stockholm.parse (stockholm)\n    this.unpackStockholmJS (data, config, stockjs)\n  }\n\n  unpackStockholmJS (data, config, stock) {\n    const structure = data.structure = data.structure || {}\n    data.rowData = stock.seqdata\n    this.guessSeqCoords (data)\n    if (stock.gf.NH && !data.newick)  // did the Stockholm alignment include a tree?\n      data.newick = stock.gf.NH.join('')\n    if (stock.gs.DR && !config.structure.noRemoteStructures)  // did the Stockholm alignment include links to PDB?\n      Object.keys(stock.gs.DR).forEach ((node) => {\n        const seqCoords = data.seqCoords[node], seqLen = seqCoords.endPos - seqCoords.startPos\n        stock.gs.DR[node].forEach ((dr) => {\n          const match = this.pdbRegex.exec(dr)\n          if (match) {\n            const pdb = match[1].toLowerCase(), chain = match[2], startPos = parseInt (match[3]), endPos = parseInt (match[4])\n            const pdbLen = endPos - startPos\n            const fullLengthMatch = seqLen === pdbLen\n            const sequenceOverlapsStructure = seqCoords.startPos <= endPos && seqCoords.endPos >= startPos\n            if (sequenceOverlapsStructure && (fullLengthMatch || !config.noPartialStructures)) {  // check structure matches sequence\n              structure[node] = structure[node] || []\n              const pdbIndex = structure[node].findIndex ((s) => s.pdb === pdb)\n              let pdbStruct\n              if (pdbIndex < 0) {\n                pdbStruct = { pdb,\n                              chains: [] }\n                structure[node].push (pdbStruct)\n              } else\n                pdbStruct = structure[node][pdbIndex]\n              pdbStruct.chains.push ({ chain,\n                                       startPos,\n                                       endPos })\n            } else\n              console.warn ('ignoring structure ' + pdb + ' (' + startPos + '...' + endPos + ') since it '\n                            + (fullLengthMatch\n                               ? ('does not overlap with ' + node)\n                               : ('is not a full-length match to ' + node + ' (' + pdbLen + '!=' + seqLen + ')')))\n          }\n        })\n      })\n  }\n  \n  componentDidMount() {\n    this.divRef.current.addEventListener ('dragover', this.handleDragOver.bind(this), false)\n    this.divRef.current.addEventListener ('dragenter', this.handleDragEnter.bind(this), false)\n    this.divRef.current.addEventListener ('drop', this.handleDrop.bind(this), false)\n    this.initDataset()\n  }\n\n  componentWillUnmount() {\n    this.divRef.current.removeEventListener ('dragover', this.handleDragOver.bind(this), false)\n    this.divRef.current.removeEventListener ('dragenter', this.handleDragEnter.bind(this), false)\n    this.divRef.current.removeEventListener ('drop', this.handleDrop.bind(this))\n  }\n\n  componentDidUpdate() {\n    this.reconstructMissingNodes()\n  }\n\n  // initDataset is called once, from componentDidMount\n  async initDataset() {\n    if (this.props.stockholm)\n      this.addDatasets (this.props.stockholm, false)\n    if (this.props.dataurl)\n      await fetch(this.makeURL (this.props.dataurl))\n      .then (async (res) => {\n        if (res.ok)\n          this.addDatasets (await res.text(), false)\n      })\n    this.nDatasetsInitial = this.state.datasets && this.state.datasets.length\n    if (this.props.data || this.state.datasets.length)\n      this.setDataset (this.props.data || this.getInitialDataset())\n  }\n\n  getInitialDataset() {\n    const params = queryString.parse(window.location.search)\n    const id = params[this.alignIdQueryParam], n = params[this.nAlignQueryParam]\n    if (id)\n      return this.state.datasets.find ((data) => data.id === id)\n    return this.state.datasets[n || 0]\n  }\n  \n  get nAlignQueryParam() { return 'alignnum' }\n  get alignIdQueryParam() { return 'alignid' }\n  \n  reconstructMissingNodes() {\n    // check if any nodes are missing; if so, do ancestral sequence reconstruction\n    const { data } = this.state\n    let promise\n    if (data) {\n      const { branches } = data\n      let rowData = extend ({}, data.rowData)\n      const missingAncestors = data.branches.filter ((b) => typeof(rowData[b[0]]) === 'undefined').length\n      if (missingAncestors && !this.state.reconstructingAncestors) {\n        this.setState ({ reconstructingAncestors: true })\n        if (window.Worker) {\n          console.warn ('Reconstructing ancestral sequences in web worker...')\n          let instance = getAncestralReconstructionWorker()\n          promise = instance.getAncestralReconstruction ({ branches, rowData, id: this.state.datasetID })\n            .then ((result) => {\n              console.warn ('Ancestral sequence reconstruction complete')\n              if (result.id === this.state.datasetID)\n                this.incorporateAncestralReconstruction (result.ancestralRowData)\n              else\n                console.warn ('Discarding unused ancestral sequence reconstruction')  // guard against bug where ancestral reconstruction comes in after dataset has been changed\n            })\n        } else {\n          console.warn ('Reconstructing ancestral sequences...')\n          promise = getAncestralReconstruction ({ branches, rowData })\n            .then ((result) => {\n              this.incorporateAncestralReconstruction (result.ancestralRowData)\n            })\n        }\n      }\n    } else\n      promise = Promise.resolve()\n    return promise\n  }\n\n  fn2workerURL (fn) {\n    const blob = new Blob(['('+fn.toString()+')()'], {type: 'application/javascript'})\n    return URL.createObjectURL(blob)\n  }\n  \n  incorporateAncestralReconstruction (ancestralRowData) {\n    const { data } = this.state\n    const rowData = extend ({}, data.rowData, ancestralRowData)\n    extend (data, { rowData })\n    this.setDataset (data)  // rebuilds indices\n  }\n\n  defaultColorScheme() { return 'maeditor' }\n  defaultConfig() {\n    return {\n      treeAlignHeight: 400,\n      genericRowHeight: 24,\n      nameFontSize: 12,\n      containerHeight: '100%',\n      containerWidth: '100%',\n      treeWidth: 200,\n      nameDivWidth: 200,\n      branchStrokeStyle: 'black',\n      nodeHandleRadius: 4,\n      nodeHandleClickRadius: 40,\n      nodeHandleFillStyle: 'white',\n      collapsedNodeHandleFillStyle: 'black',\n      rowConnectorDash: [2,2],\n      structure: { width: 400, height: 400 },\n      handler: {},\n      colorScheme: this.defaultColorScheme()\n    } }\n\n  // method to parse FASTA (simple enough to build in here)\n  parseFasta (fasta) {\n    let seq = {}, name, re = /^>(\\S+)/;\n    fasta.split(\"\\n\").forEach ((line) => {\n      const match = re.exec(line)\n      if (match)\n        seq[name = match[1]] = ''\n      else if (name)\n        seq[name] = seq[name] + line.replace(/[ \\t]/g,'')\n    })\n    return seq\n  }\n\n  // index tree\n  buildTreeIndex (data) {\n    const { branches } = data\n    let { root } = data, rootSpecified = typeof(root) !== 'undefined'\n    const roots = this.getRoots (branches)\n    if (roots.length === 0 && (branches.length > 0 || !rootSpecified))\n      throw new Error (\"No root nodes\")\n    if (rootSpecified) {\n      if (roots.indexOf(root) < 0)\n        throw new Error (\"Specified root node is not a root\")\n    } else {\n      if (roots.length !== 1)\n        throw new Error (\"Multiple possible root nodes, and no root specified\")\n      root = roots[0]\n    }\n    let children = {}, branchLength = {}\n    children[root] = []\n    branchLength[root] = 0\n    branches.forEach ((branch) => {\n      const parent = branch[0], child = branch[1], len = branch[2]\n      children[parent] = children[parent] || []\n      children[child] = children[child] || []\n      children[parent].push (child)\n      branchLength[child] = len\n    })\n    let nodes = [], seenNode = {}, descendants = {}, distFromRoot = {}, maxDistFromRoot = 0\n    const addNode = (node) => {\n      if (!node)\n        throw new Error (\"All nodes must be named\")\n      if (seenNode[node])\n        throw new Error (\"All node names must be unique (duplicate '\" + node + \"')\")\n      seenNode[node] = true\n      nodes.push (node)\n    }\n    const addSubtree = (node, parent) => {\n      distFromRoot[node] = (typeof(parent) !== 'undefined' ? distFromRoot[parent] : 0) + branchLength[node]\n      maxDistFromRoot = Math.max (maxDistFromRoot, distFromRoot[node])\n      const kids = children[node]\n      let clade = []\n      if (kids.length === 2) {\n        clade = clade.concat (addSubtree (kids[0], node))\n        addNode (node)\n        clade = clade.concat (addSubtree (kids[1], node))\n      } else {\n        addNode (node)\n        kids.forEach ((child) => clade = clade.concat (addSubtree (child, node)))\n      }\n      descendants[node] = clade\n      return [node].concat (clade)\n    }\n    addSubtree (root)\n    return { root, branches, children, descendants, branchLength, nodes, distFromRoot, maxDistFromRoot }\n  }\n\n  // get the root node(s) of a list of [parent,child,length] branches\n  getRoots (branches) {\n    const isNode = {}, hasParent = {}\n    branches.forEach ((branch) => {\n      const [p, c] = branch\n      isNode[p] = isNode[c] = hasParent[c] = true\n    })\n    return Object.keys(isNode).filter ((n) => !hasParent[n]).sort()\n  }\n\n  // index alignment\n  buildAlignmentIndex (data) {\n    const { rowData } = data\n    let rowDataAsArray = {}, alignColToSeqPos = {}, seqPosToAlignCol = {}, isChar = {}, columns\n    Object.keys(rowData).forEach ((node) => {\n      const row = rowData[node]\n      if (typeof(columns) !== 'undefined' && columns !== row.length)\n        console.error (\"Inconsistent row lengths\")\n      columns = row.length\n      let pos2col = [], pos = 0\n      const rowAsArray = this.rowAsArray (row)\n      alignColToSeqPos[node] = rowAsArray.map ((c, col) => {\n        if (typeof(c) === 'string')\n          isChar[c] = true\n        const isGap = this.isGapChar(c)\n        if (!isGap)\n          pos2col.push (col)\n        return isGap ? pos : pos++\n      })\n      rowDataAsArray[node] = rowAsArray\n      seqPosToAlignCol[node] = pos2col\n    })\n    const chars = Object.keys(isChar).sort()\n    return { alignColToSeqPos, seqPosToAlignCol, rowDataAsArray, columns, chars }\n  }\n\n  // helpers to recognize gap characters\n  isGapChar (c) { return typeof(c) === 'string' ? (c === '-' || c === '.') : (!c || Object.keys(c).length === 0) }\n  countNonGapChars (seq) { return this.rowAsArray(seq).filter ((c) => !this.isGapChar(c)).length }\n  rowAsArray (row) { return typeof(row) === 'string' ? row.split('') : row }\n  \n  render() {\n    return (\n        <div className=\"App\"\n      ref={this.divRef}\n        >\n\n        <div className=\"MSA-appbar\">\n\n        <input type='file'\n      ref={this.inputRef}\n      onChange={this.handleSelectFile.bind(this)}\n      style={{display:'none'}}\n        />\n        \n      { (this.state.data\n         ? (this.state.datasets.length\n            ? ((<Select\n                value={this.state.data.name}\n                onChange={this.handleSelectDataset.bind(this)}\n                >\n                {this.state.datasets.map ((data) => (<MenuItem key={data.name} value={data.name}>{data.name}</MenuItem>))}\n                <MenuItem value=''><i>Open alignment file</i></MenuItem>\n                </Select>\n               ))\n            : (<div className=\"MSA-appbar-title\">\n               {this.state.data.name}\n               </div>))\n         : '')}\n      \n      <div className=\"MSA-appbar-link\">\n        <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/ihh/abrowse\">GitHub</a>\n        </div>\n\n      </div>\n\n      { this.state.data &&\n        <MSA\n        ref={this.msaRef}\n        data={this.state.data}\n        isGapChar={this.isGapChar.bind(this)}\n        config={this.state.config}\n        view={this.state.view}\n        treeIndex={this.state.treeIndex}\n        alignIndex={this.state.alignIndex}\n        computedTreeConfig={this.state.computedTreeConfig}\n        computedFontConfig={this.state.computedFontConfig}\n        /> }\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst opts = {\n  dataurl: '%PUBLIC_URL%/pfam-cov2.stock',\n  config: {\n    containerHeight: '1000px',\n    handler: {\n      click: (coords) => {\n        console.warn ('Click ' + coords.node + ' column ' + coords.column + (coords.isGap ? '' : (', position ' + coords.seqPos)) + ' (' + coords.c + ')')\n      }\n    }\n  }\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App {...opts} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\ndocument.title = 'SARS-CoV-2 Pfam domains';\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","\n\t\t\t\tvar addMethods = require(\"../node_modules/workerize-loader/dist/rpc-wrapper.js\")\n\t\t\t\tvar methods = [\"getAncestralReconstruction\"]\n\t\t\t\tmodule.exports = function() {\n\t\t\t\t\tvar w = new Worker(__webpack_public_path__ + \"49e0c98df6571801ee9b.worker.js\", { name: \"[hash].worker.js\" })\n\t\t\t\t\taddMethods(w, methods)\n\t\t\t\t\t\n\t\t\t\t\treturn w\n\t\t\t\t}\n\t\t\t"],"sourceRoot":""}